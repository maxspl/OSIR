services:
  master:
    build:
      dockerfile: MasterFile
      context: ./dockerfile
    container_name: master-master
    stdin_open: true
    tty: true
    privileged: true
    environment:
      - HOST_HOSTNAME=${HOST_HOSTNAME}
      - HOST_IP_LIST=${HOST_IP_LIST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - ../../:/OSIR
    ports:
      - "8501:8501"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    profiles:
      - "master-online"
      - "all"
    restart: always

  master-offline:
    image: master-master
    container_name: master-master
    stdin_open: true
    tty: true
    privileged: true
    environment:
      - HOST_HOSTNAME=${HOST_HOSTNAME}
      - HOST_IP_LIST=${HOST_IP_LIST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - ../../:/OSIR
    ports:
      - "8501:8501"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    profiles:
      - "master-offline"
      - "all"
    restart: always

  samba:
    build:
      context: ../ 
      dockerfile: ./master/dockerfile/SambaFile
    tty: true
    network_mode: bridge
    volumes:
      - ./../../share:/Shared
    ports:
      - "139:139"
      - "445:445"
    container_name: master-samba
    profiles:
      - "smb-online"      # Assign samba service to the smb profile
      - "all"
    restart: always

  samba-offline:
    tty: true
    network_mode: bridge
    volumes:
      - ./../../share:/Shared
    ports:
      - "139:139"
      - "445:445"
    image: master-samba
    container_name: master-samba
    profiles:
      - "smb-offline"      # Assign samba service to the smb profile
      - "all"
    restart: always

  splunk:
    build:
      context: ./dockerfile
      dockerfile: SplunkFile
    container_name: master-splunk
    environment:
      - SPLUNK_GENERAL_TERMS=--accept-sgt-current-at-splunk-com
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_PASSWORD=${SPLUNK_PASSWORD}
      - SPLUNK_LICENSE_URI=${SPLUNK_LICENCE}
    ports:
      - "8000:8000"  # Splunk web interface
      - "8089:8089"  # Splunk services interface
      - "9997:9997"  # Event listening port
      - "8088:8088"  # HEC port
    volumes: 
      - ../splunk/data/etc/:/opt/splunk/etc
      - ../splunk/data/var/:/opt/splunk/var
      - ../splunk/apps/SA-ADTimeline/:/opt/splunk/etc/apps/SA-ADTimeline/ # ADTimeline app
      - ../splunk/apps/TA_evtx_dump/:/opt/splunk/etc/apps/TA_evtx_dump/ # EVTX dump app
      - ../splunk/apps/DFIR_ORC/:/opt/splunk/etc/apps/DFIR_ORC/ # DFIR ORC app
      - ./dockerfile/sources/default.yml:/tmp/defaults/default.yml # Conffiguration file to enable HEC
      - ../splunk/apps/DECODE/:/opt/splunk/etc/apps/DECODE/ # DECODE app
    profiles:
      - "splunk-online"
      - "all"
    restart: always

  splunk-offline:
    image: master-splunk
    container_name: master-splunk
    environment:
      - SPLUNK_GENERAL_TERMS=--accept-sgt-current-at-splunk-com
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_PASSWORD=${SPLUNK_PASSWORD}
      - SPLUNK_LICENSE_URI=${SPLUNK_LICENCE}
    ports:
      - "8000:8000"  # Splunk web interface
      - "8089:8089"  # Splunk services interface
      - "9997:9997"  # Event listening port
      - "8088:8088"  # HEC port
    volumes: 
      - ../splunk/data/etc/:/opt/splunk/etc
      - ../splunk/data/var/:/opt/splunk/var
      - ../splunk/apps/SA-ADTimeline/:/opt/splunk/etc/apps/SA-ADTimeline/ # ADTimeline app
      - ../splunk/apps/TA_evtx_dump/:/opt/splunk/etc/apps/TA_evtx_dump/ # EVTX dump app
      - ../splunk/apps/DFIR_ORC/:/opt/splunk/etc/apps/DFIR_ORC/ # DFIR ORC app
      - ./dockerfile/sources/default.yml:/tmp/defaults/default.yml # Conffiguration file to enable HEC
      - ../splunk/apps/DECODE/:/opt/splunk/etc/apps/DECODE/ # DECODE app
    profiles:
      - "splunk-offline"
      - "all"
    restart: always

  rabbitmq:
    build:
      dockerfile: RabbitmqFile
      context: ./dockerfile
    container_name: master-rabbitmq
    ports:
      - "5672:5672"      # AMQP protocol port
      - "15672:15672"    # Management interface port
    volumes:
      - ./dockerfile/sources/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    profiles:
      - "default"
      - "all"
    restart: always

  rabbitmq-offline:
    image: master-rabbitmq
    container_name: master-rabbitmq
    ports:
      - "5672:5672"      # AMQP protocol port
      - "15672:15672"    # Management interface port
    volumes:
      - ./dockerfile/sources/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    profiles:
      - "default-offline"
      - "all"
    restart: always

  redis:
    build:
      dockerfile: RedisFile
      context: ./dockerfile
    container_name: master-redis
    ports:
      - "6379:6379"      # Redis port
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    profiles:
      - "default"
      - "all"
    restart: always

  redis-offline:
    image: master-redis
    container_name: master-redis
    ports:
      - "6379:6379"      # Redis port
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    profiles:
      - "default-offline"
      - "all"
    restart: always

  flower:
    build:
      dockerfile: FlowerFile
      context: ./dockerfile
    container_name: master-flower
    command: 
      - "celery"
      - "--broker=amqp://dfir:dfir@rabbitmq:5672//"
      - "--result-backend=redis://redis:6379/0 "
      - "flower"
      - "--broker_api=http://dfir:dfir@rabbitmq:15672/api//"
      - "--port=5555"
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
      - redis
    environment:
      - FLOWER_UNAUTHENTICATED_API=true
    profiles:
      - "default"
      - "all"
    restart: always

  flower-offline:
    image: master-flower
    container_name: master-flower
    command: 
      - "celery"
      - "--broker=amqp://dfir:dfir@rabbitmq:5672//"
      - "--result-backend=redis://redis:6379/0 "
      - "flower"
      - "--broker_api=http://dfir:dfir@rabbitmq:15672/api//"
      - "--port=5555"
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq-offline
      - redis-offline
    environment:
      - FLOWER_UNAUTHENTICATED_API=true
    profiles:
      - "default-offline"
      - "all"
    restart: always

  postgres:
    build:
      dockerfile: PostgresFile
      context: ./dockerfile
    container_name: master-postgres
    environment:
      - POSTGRES_DB=OSIR_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    profiles:
      - "default"
      - "all"
    restart: always

  postgres-offline:
    image: master-postgres
    container_name: master-postgres
    environment:
      - POSTGRES_DB=OSIR_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    profiles:
      - "default-offline"
      - "all"
    restart: always

  pgadmin:
    build:
      dockerfile: PgadminFile
      context: ./dockerfile
    container_name: master-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USER}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "80:80"
    volumes:
      - ./dockerfile/sources/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    profiles:
      - "default"
      - "all"
    restart: always

  pgadmin-offline:
    image: master-pgadmin
    container_name: master-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USER}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "80:80"
    volumes:
      - ./dockerfile/sources/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres-offline
    profiles:
      - "default-offline"
      - "all"
    restart: always
